use actix_web::{
    get, post, delete, patch, web::{Data, Json, Query, Path, ServiceConfig}, HttpResponse, Responder
};
use actix_multipart::Multipart;
use futures_util::StreamExt; // Importa o trait StreamExt para o método next
use serde_json::json;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;
use uuid::Uuid;
use crate::{
    model::VideoModel,
    schema::{CreateVideoSchema, UpdateVideoSchema, FilterOptions},
    AppState
};
use sqlx::PgPool;

// Handler para o upload de vídeo e criação de registro no banco de dados
#[post("/add-video")]
async fn add_video(
    app_state: Data<AppState>,
    mut payload: Multipart,
) -> impl Responder {
    let mut filename = String::new();
    let mut description = String::new();

    while let Some(field) = payload.next().await {
        match field {
            Ok(mut field) => {
                // Processar o arquivo
                filename = format!("{}.mp4", Uuid::new_v4());
                let file_path = PathBuf::from("uploads").join(&filename);
                let mut file = File::create(&file_path).expect("Failed to create file");

                while let Some(chunk) = field.next().await {
                    match chunk {
                        Ok(data) => file.write_all(&data).expect("Failed to write data to file"),
                        Err(e) => return HttpResponse::InternalServerError().json(format!("Failed to read chunk: {:?}", e)),
                    }
                }
            }
            Err(e) => return HttpResponse::InternalServerError().json(format!("Failed to read field: {:?}", e)),
        }
    }

    // Criação do registro no banco de dados
    let query = r#"
        INSERT INTO videos (filename, description)
        VALUES ($1, $2)
        RETURNING id, filename, description, created_at
    "#;

    match sqlx::query_as::<_, VideoModel>(query)
        .bind(&filename)
        .bind(&description)
        .fetch_one(&app_state.db)
        .await
    {
        Ok(video) => {
            let response = json!({
                "status": "success",
                "video": {
                    "id": video.id,
                    "filename": video.filename,
                    "description": video.description,
                    "created_at": video.created_at
                }
            });
            HttpResponse::Ok().json(response)
        }
        Err(error) => {
            let response = json!({
                "status": "error",
                "message": format!("Failed to create video record: {:?}", error)
            });
            HttpResponse::InternalServerError().json(response)
        }
    }
}
#[post("/videos")]
async fn create_video(
    body: Json<CreateVideoSchema>,
    data: Data<AppState>
) -> impl Responder {
    let query = r#"
        INSERT INTO videos (student_id, filename, description)
        VALUES ($1, $2, $3)
        RETURNING id, student_id, filename, description, created_at
    "#;

    match sqlx::query_as::<_, VideoModel>(query)
        .bind(&body.student_id)
        .bind(&body.filename)
        .bind(&body.description)
        .fetch_one(&data.db)
        .await
    {
        Ok(video) => {
            let response = json!({
                "status": "success",
                "video": {
                    "id": video.id,
                    "student_id": video.student_id,
                    "filename": video.filename,
                    "description": video.description,
                    "created_at": video.created_at
                }
            });
            HttpResponse::Ok().json(response)
        }
        Err(error) => {
            let response = json!({
                "status": "error",
                "message": format!("Failed to create video: {:?}", error)
            });
            HttpResponse::InternalServerError().json(response)
        }
    }
}

#[get("/videos")]
pub async fn get_all_videos(
    opts: Query<FilterOptions>,
    data: Data<AppState>
) -> impl Responder {
    let limit = opts.limit.unwrap_or(10);
    let offset = (opts.page.unwrap_or(1) - 1) * limit;

    match sqlx::query_as!(
        VideoModel,
        "SELECT * FROM videos ORDER BY id LIMIT $1 OFFSET $2",
        limit as i32,
        offset as i32
    )
    .fetch_all(&data.db)
    .await
    {
        Ok(videos) => {
            let response = json!({
                "status": "success",
                "videos": videos
            });
            HttpResponse::Ok().json(response)
        }
        Err(error) => {
            let response = json!({
                "status": "error",
                "message": format!("Failed to get videos: {:?}", error)
            });
            HttpResponse::InternalServerError().json(response)
        }
    }
}

#[get("/videos/{id}")]
async fn get_video_by_id(
    path: Path<Uuid>,
    data: Data<AppState>
) -> impl Responder {
    let video_id = path.into_inner();

    match sqlx::query_as!(
        VideoModel,
        "SELECT * FROM videos WHERE id = $1",
        video_id
    )
    .fetch_one(&data.db)
    .await
    {
        Ok(video) => {
            let response = json!({
                "status": "success",
                "video": video
            });
            HttpResponse::Ok().json(response)
        }
        Err(error) => {
            let response = json!({
                "status": "error",
                "message": format!("Failed to get video: {:?}", error)
            });
            HttpResponse::InternalServerError().json(response)
        }
    }
}

#[patch("/videos/{id}")]
async fn update_video_by_id(
    path: Path<Uuid>,
    body: Json<UpdateVideoSchema>,
    data: Data<AppState>
) -> impl Responder {
    let video_id = path.into_inner();

    match sqlx::query_as!(VideoModel, "SELECT * FROM videos WHERE id = $1", video_id)
        .fetch_one(&data.db)
        .await
    {
        Ok(video) => {
            let update_result = sqlx::query_as!(
                VideoModel,
                "UPDATE videos SET student_id = COALESCE($1, student_id), filename = COALESCE($2, filename), description = COALESCE($3, description) WHERE id = $4 RETURNING *",
                body.student_id.as_ref(),
                body.filename.as_ref(),
                body.description.as_ref(),
                video_id
            )
            .fetch_one(&data.db)
            .await;

            match update_result {
                Ok(updated_video) => {
                    let response = json!({
                        "status": "success",
                        "video": updated_video
                    });
                    HttpResponse::Ok().json(response)
                }
                Err(update_error) => {
                    let response = json!({
                        "status": "error",
                        "message": format!("Failed to update video: {:?}", update_error)
                    });
                    HttpResponse::InternalServerError().json(response)
                }
            }
        }
        Err(fetch_error) => {
            let response = json!({
                "status": "error",
                "message": format!("Video not found: {:?}", fetch_error)
            });
            HttpResponse::NotFound().json(response)
        }
    }
}

#[delete("/videos/{id}")]
async fn delete_video_by_id(
    path: Path<Uuid>,
    data: Data<AppState>
) -> impl Responder {
    let video_id = path.into_inner();

    match sqlx::query!("DELETE FROM videos WHERE id = $1", video_id)
        .execute(&data.db)
        .await
    {
        Ok(_) => HttpResponse::NoContent().finish(),
        Err(err) => {
            let response = json!({
                "status": "error",
                "message": format!("Failed to delete video: {:?}", err)
            });
            HttpResponse::InternalServerError().json(response)
        }
    }
}

// Configuração das rotas para vídeos
pub fn config_videos(conf: &mut ServiceConfig) {
    conf.service(create_video)
       .service(get_all_videos)
       .service(get_video_by_id)
       .service(update_video_by_id)
       .service(delete_video_by_id)
       .service(add_video);
}
